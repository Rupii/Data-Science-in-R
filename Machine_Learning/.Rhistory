3 + 9
5 ^ 3
name <- "Rupesh"
# like any other scripting language R is a dynamically typed language
# <- denotes assignment
n = 103
# = works too but <- is  general practice
"Rupi" -> na
#dataTypes
class(2.2)
class(3)
class('3f')
class(T)
print("Hello World!")
# Arthematic Operators
3 + 9
5 ^ 3
# variable
name <- "Rupesh"
# like any other scripting language R is a dynamically typed language
# <- denotes assignment
n = 103
# = works too but <- is  general practice
"Rupi" -> na # is valid too
#dataTypes
class(2.2)
class(3)
class('3f')
class(T) # T and TRUE are both used used for logical # same for FALSE
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# all the foat and real numbers are of class numeric
# vector are one of the key data structures in R
vect <- c(1, 3, 45, 5)
# vector are one of the key data structures in R
vect <- c(1, 3, 45, 5)
var <- c('a', 'b', 'c', 'd')
names(vect) <- var
vect
# aggrigate functions on vectors
min(vect)
bool <- c(T, F, T)
bool <- c(T, F, T)
vect <- c(1, 3, 45, 5)
bool
#names
var <- c('a', 'b', 'c', 'd')
max(vect)
mean(vect)
summary(vect)
IQR(vect)
IQR(vect) # interquartile range
vect
v[1:4]
vect[1:4]
vect[1:2]
vect[c(2, 4)]
vect[c('a', 'b')]
#names
var <- c('a', 'b', 'c', 'd')
names(vect) <- var
vect[c('a', 'b')]
help("vector")
?vector
help.search("vector")
q()
readline("enter")
readline("enter") -> names
names
strsplit(names, split(' '))
strsplit(names, split(''))
strsplit(names, split(" "))
strsplit(names)
strsplit(names, split = " ")
q()
pwd
getwd()
names <- c("Rupesh", "Ramesh", "cse")
id  <- c(105, 101, 102)
df <- data.frame(names, id)
df
head(df)
#tail gives bottom 6
tail(df)
# you can see the R in bild datasets using function data()
data()
#data frame indexing
df[names]
#data frame indexing
df["names"]
df[1, ]
df[, 1]
df$names
df.temp <- order(df['id'])
df.temp
df[df.temp]
df['df.temp']
df <- read.csv(file.choose())
summary(df) # gives the statistical information on our dataframe
# adding an extra coloumn
df$extra <- c(3, 1, 2)
#head gives top 6
head(df)
nrow(df)
ncol(df)
# boolean masking
df[df$id > 100]
nrow(df)
is.na(df)
# logical operator
X <- 10
X > 5 & X < 13
(4 < 7) & (3 < 4)
(4 < 7) | (3 < 2)
23 == 23
23 == 23 #equal to
# if else if
a <- 4
a <- 4
if (a > 3){
print("you are awesome")
}
else {
print("you suck")
}
a <- 4
if (a > 3){
print("you are awesome")
}
else {
print("you suck")
}
# if else if
a <- 4
# if else if
a <- 4
if (a > 3){
print("you are awesome")
}
else {
print("you suck")
}
a <- 4
if (a > 3){
print("you are awesome")
}else {
print("you suck")
}
x <- 10
while(x > 0){
print("counting", x)
x--
}
x <- 10
while(x > 0){
print("counting", x)
x <- x-1
}
x <- 10
while(x > 0){
print(paste("counting", x))
x <- x-1
}
for(i in 1:10){
print(i)
}
fun.name <- function(arg){
x <- 10
return x
}
fun.name <- function(arg){
x <- 10
return x
}
fun.name <- function(arg){
x <- 10
}
return(x)
fun.name <- function(arg){
x <- 10
return(x)
}
fun.name <- function(arg, agr2 = 10){
x <- arg + arg2
return(x)
}
fun.name <- function(arg, agr2 = 10){
x <- arg + arg2
return(x)
} # arg to is default
fun.name(10)
fun.name <- function(arg, arg2 = 10){
x <- arg + arg2
return(x)
} # arg to is default
fun.name(10)
fun(1, 1)
fun.name(1, 1)
fun.name(10) #if you don't pass the second argument it takes 10 as default
fun.name(1, 1)
seq(1, 10, by = 2)
# sort()
v <- randu(10)
# sort()
v <- randu()
# sort()
v <- rand()
# sort()
v <- rnorm()
# sort()
v <- rnorm(2)
# sort()
v <- runif(2)
v
# sort()
v <- runif(10)
sort(v)
sort(v, decreasing = T)
rep(1, 2)
rep(seq(1, 6, 2), 4)
# rev reverse
rev(v)
# used a lot in data science (gives the structure of the data structures
v2 <- 1:3:3
v2 <- 1:3
#append() appends two vectors
v1 <- c(1, 3, 3, 754)
v2 <- 1:3
append(v1, v2)
# check data types
is.vector(v1)
# check data types
is.vector(v1) # returns a boolean value
is.matrix()
is.data.frame()
is.data.frame(v2)
is.numeric(3)
is.numeric('#')
# converting
as.numeric('3')
as.list(v1)
sample(v = 1:100, 3) # sample of 3 num from 1-100
sample(v = 1:10, 3) # sample of 3 num from 1-100
sample(1:10, 3) # sample of 3 num from 1-100
sample(1:100, 3) # sample of 3 num from 1-100
v <- c(3, 65, 2, 3)
add.rand <- function(x){
x <- x + runif(1)
return(x)
}
lapply(v, add.rand)
sapply(v, add.rand)
sapply(v, add.rand) # returns a vector instead of list
?sapply
help("apply")
help("apply") #cheak out different apply functions
v <- 15:20
res <- sapply(v, function(num){num/2})
v <- 15:20
res <- sapply(v, function(num){num/2})
print(res)
me <- "you are cool to be a data scientist"
grep("you", me)
grep("you", me)
grepl("are", me)
?grep
data.frame()
require(dplyr)
setwd("C:/Users/Rupesh/Desktop/R_docs/R/Machine_Learning")
library(ISLR)
print(head(iris))
# required library e1071
install.packages('e701')
require(e701)
# required library e1071
install.packages('e1701')
require(e1701)
# required library e1071
install.packages('e1071')
require(e1701)
require(e1071)
# Svm
model <- svm(Species ~ ., data = iris)
summary(model)
pred.values <- predict(model, iris[1:4])
table(pred.values <- predict(model, iris[1:4]))
table(pred.values, iris[, 5])
